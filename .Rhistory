group_by(irrigation_type, moisture, block) |>
summarize(AUDPC = AUDPC(time, sev))
# Visualizar AUDPC
oidio3 |>
ggplot(aes(x = irrigation_type, y = AUDPC, color = moisture)) +
geom_point(size = 2) +
facet_wrap(~moisture) +
scale_y_continuous(limits = c(0, 20))
# Modelo linear para AUDPC com interação
model_oidio <- lm(AUDPC ~ irrigation_type * moisture, data = oidio3)
# Verifique o objeto
glimpse(oidio3)
# Se as colunas não estiverem corretas, crie novamente:
oidio3 <- oidio2 %>%
group_by(irrigation_type, moisture, block) %>%
summarize(AUDPC = AUDPC(time, sev), .groups = "drop")
# Agora rode o teste ANOVA
anova_test(oidio3, AUDPC ~ irrigation_type * moisture)
# Análise de variância
anova(model_oidio)
# Simulação dos resíduos
plot(simulateResiduals(model_oidio))
# Estimativas marginais condicionais
medias_oidio <- emmeans(model_oidio, ~ moisture | irrigation_type)
cld(medias_oidio)
# Coeficiente de variação
cv.model(model_oidio)
# Teste de ANOVA com rstatix (opcional)
anova_test(oidio3, AUDPC ~ irrigation_type * moisture)
options(repos = c(CRAN = "https://cloud.r-project.org"))
# ----------------------------
# Pacotes necessários
# ----------------------------
library(DHARMa)       # Simulação de resíduos para modelos
library(multcomp)     # Comparações múltiplas
library(car)          # Análises ANOVA e diagnóstico
library(emmeans)      # Estimativa de médias marginais
library(gsheet)       # Importar planilhas Google Sheets
library(ggplot2)      # Visualização gráfica
library(dplyr)        # Manipulação de dados
library(agricolae)    # Testes não paramétricos e comparações
library(patchwork)    # Compor múltiplos plots
library(epifitter)    # Dados e funções epidemiológicas
library(rstatix)      # Funções de testes estatísticos
# ----------------------------
# Modelo Linear para Insetos com Transformação
# ----------------------------
insetos <- InsectSprays
# Ajuste do modelo linear com transformação sqrt para normalizar resíduos
m2 <- lm(sqrt(count) ~ spray, data = insetos)
# Visualização dos resíduos simulados com DHARMa
plot(simulateResiduals(m2))
# Verificação das premissas do modelo linear
check_model(m2)
# ----------------------------
# Modelo GLM para Insetos (Poisson)
# ----------------------------
m4 <- glm(count ~ spray, data = insetos, family = poisson)
# Análise de variância para o GLM
anova(m4)
Anova(m4) # Anova pelo pacote car
# Visualização dos resíduos simulados do GLM
plot(simulateResiduals(m4))
# Estimativa das médias marginais e comparações múltiplas
medias_m4 <- emmeans(m4, ~ spray, type = "response")
cld(medias_m4)
# ----------------------------
# Análise Fatorial: Fungicida e Dose
# ----------------------------
fungicida_vaso <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=2023059672#gid=2023059672")
# Visualizar severidade por dose e tratamento
fungicida_vaso |>
ggplot(aes(dose, severity * 100)) +
geom_jitter(width = 0.1) +
facet_wrap(~treat)
# Modelo linear com interação entre tratamento e dose
m_anti <- lm(severity ~ treat * dose, data = fungicida_vaso)
# Análise de variância do modelo
anova(m_anti)
# Simulação dos resíduos com DHARMa
plot(simulateResiduals(m_anti))
# Estimativas marginais condicionais e agrupamento
media_anti_treat <- emmeans(m_anti, ~ treat | dose)
cld(media_anti_treat)
media_anti_dose <- emmeans(m_anti, ~ dose | treat)
cld(media_anti_dose)
# Coeficiente de variação
cv.model(m_anti)
# Gráfico de interação dose x tratamento
interaction.plot(fungicida_vaso$treat, fungicida_vaso$dose, fungicida_vaso$severity, data = fungicida_vaso)
# Gráficos separados para dose e tratamento
p1 <- fungicida_vaso |>
ggplot(aes(dose, severity * 100)) +
geom_jitter(width = 0.1)
p2 <- fungicida_vaso |>
ggplot(aes(treat, severity * 100)) +
geom_jitter(width = 0.1)
# Mostrar os dois gráficos lado a lado
p1 + p2
# ----------------------------
# Análise de Oídio - Severidade e AUDPC
# ----------------------------
oidio <- PowderyMildew
# Visualizar severidade por tempo e tipo de irrigação
oidio |>
ggplot(aes(time, sev * 100)) +
geom_jitter(width = 0.1) +
facet_wrap(~irrigation_type)
# Visualização por duas variáveis condicionais
oidio |>
ggplot(aes(time, sev * 100)) +
geom_jitter(width = 0.1) +
facet_grid(~irrigation_type ~ moisture)
# Filtrar irrigação específicas
oidio2 <- oidio |>
filter(irrigation_type %in% c("MS", "Ms above canopy", "Overhead"))
# Visualizar dados filtrados
oidio2 |>
ggplot(aes(time, sev * 100)) +
geom_jitter(width = 0.1) +
facet_wrap(~moisture ~ irrigation_type)
# Calcular AUDPC agrupado
oidio3 <- oidio2 |>
group_by(irrigation_type, moisture, block) |>
summarize(AUDPC = AUDPC(time, sev))
# Visualizar AUDPC
oidio3 |>
ggplot(aes(x = irrigation_type, y = AUDPC, color = moisture)) +
geom_point(size = 2) +
facet_wrap(~moisture) +
scale_y_continuous(limits = c(0, 20))
# Modelo linear para AUDPC com interação
model_oidio <- lm(AUDPC ~ irrigation_type * moisture, data = oidio3)
# Verifique o objeto
glimpse(oidio3)
# Se as colunas não estiverem corretas, crie novamente:
oidio3 <- oidio2 %>%
group_by(irrigation_type, moisture, block) %>%
summarize(AUDPC = AUDPC(time, sev), .groups = "drop")
# Agora rode o teste ANOVA
anova_test(oidio3, AUDPC ~ irrigation_type * moisture)
# Análise de variância
anova(model_oidio)
# Simulação dos resíduos
plot(simulateResiduals(model_oidio))
# Estimativas marginais condicionais
medias_oidio <- emmeans(model_oidio, ~ moisture | irrigation_type)
cld(medias_oidio)
# Coeficiente de variação
cv.model(model_oidio)
# Teste de ANOVA com rstatix (opcional)
anova_test(oidio3, AUDPC ~ irrigation_type * moisture)
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Carregamento de pacotes necessários
library(readxl)       # Leitura de arquivos Excel
library(ggplot2)      # Visualização de dados
library(DHARMa)       # Simulação e diagnóstico de resíduos
library(emmeans)      # Estimativa de médias marginais
library(multcomp)     # Comparações múltiplas (cld, pwpm)
library(agricolae)    # Cálculo do coeficiente de variação
library(lme4)         # Modelos lineares mistos
library(dplyr)        # Manipulação de dados
# Leitura dos dados
campo <- read_xlsx("dados-diversos.xlsx", sheet = "fungicida_campo")
milho <- read_xlsx("dados-diversos.xlsx", sheet = "milho")
# Correlação entre variáveis
cor(campo$FER, campo$PROD)
cor.test(campo$FER, campo$DFC)
# Gráfico de dispersão por tratamento com erro padrão
campo |>
ggplot(aes(x = TRAT, y = PROD)) +
geom_jitter(width = 0.1) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", colour = "red", width = 0.3) +
stat_summary(fun = mean, geom = "point", colour = "red", size = 2)
# Ajuste de fatores
campo$TRAT <- factor(campo$TRAT)
campo$BLOCO <- factor(campo$BLOCO)
# Modelo linear com log da FER ~ BLOCO + TRAT
m_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova(m_campo)
# Diagnóstico dos resíduos
plot(simulateResiduals(m_campo))
# Médias ajustadas por tratamento
means_campo <- emmeans(m_campo, ~TRAT)
plot(means_campo)
cld(means_campo)        # Letras de comparação
pwpm(means_campo)       # Comparação em forma de matriz
cv.model(m_campo)       # Coeficiente de variação
# Diagnóstico gráfico do modelo
plot(m_campo)
# Análise de correlação no conjunto milho
milho |>
ggplot(aes(index, yield)) +
geom_point() +
geom_smooth(method = "lm")
cor.test(milho$index, milho$yield)
cor1 <- cor(milho$index, milho$yield)
cor1^2 * 100  # Coeficiente de determinação (%)
# Gráfico comparativo entre híbridos por método
milho |>
ggplot(aes(hybrid, index, color = method)) +
geom_jitter(width = 0.1) +
coord_flip()
# Modelo misto: yeld ~ híbrido * método + bloco aninhado
milho$hybrid_block <- interaction(milho$hybrid, milho$block)
m_milho <- lmer(yield ~ hybrid * method + (1 | block:hybrid_block), data = milho)
# ANOVA do modelo misto
car::Anova(m_milho)
# Diagnóstico de resíduos do modelo misto
plot(simulateResiduals(m_milho))
# Estimativa de médias por híbrido e método
media_milho <- emmeans(m_milho, ~ hybrid | method)
cld(media_milho, Letters = letters)
media_milho <- emmeans(m_milho, ~ method | hybrid)
cld(media_milho, Letters = letters)
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Carregando pacotes necessários
library(MASS)
library(DHARMa)
library(tidyverse)
# Dataset: InsectSprays
data("InsectSprays")
insetos <- InsectSprays
# Modelo linear com transformação sqrt
m1 <- lm(sqrt(count) ~ spray, data = insetos)
plot(simulateResiduals(m1))  # Avaliação de resíduos com DHARMa
# Box-Cox para encontrar melhor lambda de transformação
# Garante que count é numérica
insetos$count <- as.numeric(as.character(insetos$count))
# Aplica Box-Cox
b <- boxcox(lm(count + 0.1 ~ 1, data = insetos))
lambda <- b$x[which.max(b$y)]
lambda
# Aplicando transformação Box-Cox
insetos <- insetos |>
mutate(count2 = ((count^lambda - 1) / lambda))
# Análise de regressão linear (dados experimentais)
library(gsheet)
library(ggplot2)
# Importando dados do Google Sheets
stand <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555")
# Visualizando relação entre tratamento e número de plantas por experimento
stand |>
ggplot(aes(trat, nplants)) +
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "black") +
facet_wrap(~exp) +
theme_minimal() +
labs(x = "% de inóculo de sementes", y = "Número de plantas")
# Modelos lineares por experimento
exp1 <- filter(stand, exp == 1)
m_exp1 <- lm(nplants ~ trat + bloco, data = exp1)
exp2 <- filter(stand, exp == 2)
m_exp2 <- lm(nplants ~ trat, data = exp2)
exp3 <- filter(stand, exp == 3)
m_exp3 <- lm(nplants ~ trat, data = exp3)
# Modelo misto considerando efeitos aleatórios (experimento e bloco)
library(lme4)
m_misto <- lmer(nplants ~ trat + (1 | exp/bloco), data = stand)
car::Anova(m_misto)  # ANOVA com efeito misto
# Visualização geral da regressão ajustada
stand |>
ggplot(aes(trat, nplants, color = factor(exp))) +
geom_point() +
geom_abline(intercept = 69.74, slope = -0.568, linewidth = 2) +
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed") +
geom_abline(intercept = 96, slope = -0.40, linetype = "dashed")
# Regressão não linear
library(drc)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Resumo e visualização das médias
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination), .groups = "drop") |>
ggplot(aes(dose, germination)) +
geom_point() +
geom_line() +
facet_wrap(~code)
# Regressão dose-resposta para um isolado específico
FGT43 <- filter(fungi, code == "FGT43")
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
AIC(m43)
plot(m43)
ED(m43, 50)  # Dose efetiva 50%
# Estimando EC50 para todos os isolados
library(ec50estimator)
df_ec50 <- estimate_EC50(
germination ~ dose,
data = fungi,
isolate_col = "code",
strata_col = "state",
interval = "delta",
fct = drc::LL.3()
)
# Visualizando estimativas de EC50
df_ec50 |>
ggplot(aes(reorder(ID, Estimate), Estimate)) +
geom_point() +
coord_flip()
# Histograma das estimativas
df_ec50 |>
ggplot(aes(x = Estimate)) +
geom_histogram(bins = 5, color = "white")
dados2 <- dados2 |> mutate(dose = as.numeric(dose))
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Carregando os pacotes necessários para essa aula
library(tidyverse)    # Carrega o conjunto de pacotes do tidyverse
library(readxl)       # Para leitura de arquivos Excel (.xls/.xlsx)
library(writexl)      # Para exportar dados em formato .xlsx
library(gsheet)       # Para importar planilhas do Google Sheets
library(janitor)      # Para tabelas limpas e funções como 'tabyl'
library(ggthemes)     # Temas visuais para gráficos com ggplot2
library(patchwork)    # Para combinar múltiplos gráficos ggplot
#---------------------------------------
# 1. Importação de dados locais
#---------------------------------------
# Lê a 3ª planilha do arquivo Excel
dados2 <- read_excel("dados-diversos.xlsx", sheet = 3)
dados2
# Verifica a estrutura dos dados
str(dados2)
glimpse(dados2)  # Visualização amigável da estrutura
# Lê um arquivo .csv
curve <- read.csv("curva.csv")
# Exporta os dados em dois formatos
write_xlsx(curve, "curva2.xlsx")
write.csv(curve, "curve2.csv", row.names = FALSE)
#---------------------------------------
# 2. Importação de dados da nuvem (Google Sheets)
#---------------------------------------
# Importa planilhas públicas do Google Sheets
dados_nuvem <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=373270992")
dados_mg     <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137")
survey       <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738")
#---------------------------------------
# 3. Exploração inicial dos dados 'survey'
#---------------------------------------
# Contagem por grupos
survey |> group_by(state)   |> count()
survey |> group_by(species) |> count()
survey |> group_by(residue) |> count()
survey |> group_by(state, residue) |> count()
# Filtro por estados específicos
RS <- survey |> filter(state == "RS")
PR <- survey |> filter(state == "PR")
# Combina os dados dos dois estados
combinado <- rbind(RS, PR)
#---------------------------------------
# 4. Seleção e filtragem de colunas
#---------------------------------------
# Seleciona apenas algumas colunas
survey_b <- survey |> select(year, state, species)
# Alternativa explícita com dplyr:: (equivalente)
survey_b <- survey |> dplyr::select(year, state, species)
# Filtra dados apenas do ano de 2009
survey_2009 <- survey |>
select(year, state, species) |>
filter(year == 2009)
#---------------------------------------
# 5. Conversão de tipo de variável
#---------------------------------------
# Garante que a coluna 'dose' seja numérica
dados2 <- read_excel("dados-diversos.xlsx", sheet = 2)
dados2
dados2 <- dados2 |> mutate(dose = as.numeric(dose))
#---------------------------------------
# 6. Tabelas de contingência
#---------------------------------------
# Frequência cruzada entre ano e espécie
survey_b |> tabyl(year, species)
#---------------------------------------
# 7. Visualizações com ggplot2
#---------------------------------------
# Gráfico de colunas por espécie e ano
survey_b |>
group_by(year, species) |> count() |>
ggplot(aes(year, n)) +
geom_col() +
facet_wrap(~species)
# Gráfico colorido manualmente
survey_b |>
group_by(year, species) |> count() |>
ggplot(aes(year, n, fill = species)) +
geom_col() +
scale_fill_manual(values = c("red", "blue"))
# Gráfico em escala de cinza
survey_b |>
group_by(year, species) |> count() |>
ggplot(aes(year, n, fill = species)) +
geom_col() +
scale_fill_grey()
# Gráfico com paleta viridis (mais acessível)
survey_b |>
group_by(year, species) |> count() |>
ggplot(aes(year, n, fill = species, color = species)) +
geom_col() +
scale_fill_viridis_d()
#---------------------------------------
# 8. Visualizações do conjunto 'mg'
#---------------------------------------
# Importa os dados novamente (já feito antes, poderia ser omitido)
mg <- dados_mg
# Gráfico de dispersão simples
mg |>
ggplot(aes(trat, comp)) +
geom_point()
# Gráfico com jitter para melhor visualização
mg |>
ggplot(aes(trat, comp)) +
geom_jitter(width = 0.1) +
scale_y_continuous(limits = c(0, 20))
# Boxplot com jitter sobreposto
mg |>
ggplot(aes(trat, comp)) +
geom_boxplot() +
geom_jitter(width = 0.1, color = "gray50") +
scale_y_continuous(limits = c(0, 20)) +
labs(x = "Tratamento", y = "Comprimento (mm)") +
theme_classic()
# Gráfico final formatado
plot_mg <- mg |>
ggplot(aes(trat, comp)) +
geom_boxplot(fill = "#056646", outlier.colour = NA) +
geom_jitter(width = 0.1, color = "gray50") +
scale_y_continuous(limits = c(0, 20)) +
labs(
x = "Tratamento", y = "Comprimento (mm)",
title = "Efeito do magnésio",
subtitle = "Tamanho da lesão da mancha",
caption = "Betim, V. R. P. B"
) +
theme_classic(base_size = 14)
# Salva o gráfico em PNG
ggsave("box.png", plot = plot_mg, bg = "white", width = 5, height = 4)
#---------------------------------------
# 9. Gráfico micelial
#---------------------------------------
micelial <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=959387827")
plot_micelial <- micelial |>
ggplot(aes(x = reorder(especie, tcm), y = tcm)) +
geom_boxplot(fill = "white", outlier.colour = NA) +
geom_jitter(width = 0.1) +
coord_flip() +
labs(
x = "Espécie", y = "TCM (mm)",
title = "Taxa de crescimento micelial",
caption = "Fonte: V. Betim (2021)"
) +
theme_clean()
#---------------------------------------
# 10. Combinação de gráficos com patchwork
#---------------------------------------
# Combina os dois gráficos lado a lado
combo_plot <- (plot_mg + plot_micelial) +
plot_annotation(tag_levels = "A")
# Salva o gráfico combinado
ggsave("combo1.png", combo_plot, bg = "white", width = 8, height = 4)
# Garante que a coluna 'dose' seja numérica
dados2 <- read_excel("dados-diversos.xlsx", sheet = 2)
dados2
# Lê a 2ª planilha do arquivo Excel (essa contém 'dose')
dados2 <- read_excel("dados-diversos.xlsx", sheet = 2)
print(colnames(dados2))   # Verificar colunas da planilha 2, confirmar que 'dose' existe
glimpse(dados2)
# Converte a coluna dose para numérico (garantindo que exista)
dados2 <- dados2 |> mutate(dose = as.numeric(as.character(dose)))
---
title: "Aulas"
library(stringr)
qmd_lines <- readLines("Caderno_de_aulas.qmd")
dose_lines <- grep("dose", qmd_lines, value = TRUE)
print(dose_lines)
library(stringr)
qmd_lines <- readLines("Caderno_de_aulas.qmd")
dose_lines <- grep("dose", qmd_lines, value = TRUE)
print(dose_lines)
# Substitua o caminho para seu arquivo .qmd aqui:
arquivo <- "Caminho/para/seu/Caderno_de_aulas.qmd"
# Lê o arquivo inteiro
linhas <- readLines(arquivo)
arquivo <- "C:\Users\vitor\OneDrive\Documentos\GitHub\caderno_de_aula\caderno_de_aula\Caderno\Aulas.qmd"  # ajuste o caminho
arquivo <- "C:\Users\vitor\OneDrive\Documentos\GitHub\caderno_de_aula\caderno_de_aula\Caderno\Aulas.qmd"  # ajuste o caminho
# Ler o arquivo todo
linhas <- readLines(arquivo)
# Procurar a linha que contenha a função que dá erro
linhas_erro <- grep("mutate\\(dose = as.numeric\\(dose\\)\\)", linhas)
if(length(linhas_erro) > 0) {
cat("Linha(s) encontrada(s) com 'mutate(dose = as.numeric(dose))':\n\n")
for(i in linhas_erro) {
cat(paste0("Linha ", i, ": ", linhas[i], "\n"))
}
} else {
cat("Nenhuma linha com 'mutate(dose = as.numeric(dose))' encontrada no arquivo.\n")
}
arquivo <- "C:\Users\vitor\OneDrive\Documentos\GitHub\caderno_de_aula\caderno_de_aula\Caderno\Aulas.qmd"  # ajuste o caminho
arquivo <- "C:\Users\vitor\OneDrive\Documentos\GitHub\caderno_de_aula\caderno_de_aula\Caderno\Aulas.qmd"  # ajuste o caminho
arquivo <- "C:\Users\vitor\OneDrive\Documentos\GitHub\caderno_de_aula\caderno_de_aula\Caderno\Aulas.qmd"  # ajuste o caminho
arquivo <- "C:/Users/vitor/OneDrive/Documentos/GitHub/caderno_de_aula/caderno_de_aula/Caderno/Aulas.qmd"  # ajuste o caminho
# Ler o arquivo todo
linhas <- readLines(arquivo)
# Procurar a linha que contenha a função que dá erro
linhas_erro <- grep("mutate\\(dose = as.numeric\\(dose\\)\\)", linhas)
if(length(linhas_erro) > 0) {
cat("Linha(s) encontrada(s) com 'mutate(dose = as.numeric(dose))':\n\n")
for(i in linhas_erro) {
cat(paste0("Linha ", i, ": ", linhas[i], "\n"))
}
} else {
cat("Nenhuma linha com 'mutate(dose = as.numeric(dose))' encontrada no arquivo.\n")
}
rm(list = ls())
quarto clean
